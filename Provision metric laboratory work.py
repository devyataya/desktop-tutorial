# -*- coding: utf-8 -*-
"""Practical Work #3 Giorgbiani

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/108Qo3ygWqHdTCQG-S6NkY-CMW1CcAovw

#Practical Work #3: Provision metric

*On the example of Pudong district, Shanghai*
"""

!pip install osmnx mapclassify

import geopandas as gpd
import pandas as pd
import numpy as np
from shapely.geometry import Point, LineString, Polygon
import matplotlib.pyplot as plt
import folium
import mapclassify
import osmnx as os

sha = os.geocoder.geocode_to_gdf("Shanghai")

#sha

pudong = os.geocoder.geocode_to_gdf("Pudong, Shanghai, China")

pudong

pudong.explore()

pudong.geometry.values

pudong_buildings = os.features.features_from_polygon(pudong.geometry.values[0],
                                                        tags={
                                                            "building": ["apartments", "house", "residential", "detached", "dormitory"]
                                                            }
                                                        )
pudong_buildings.shape

pudong_buildings.explore()

pudong_buildings.geometry.duplicated(keep=False).sum()

#pudong_buildings[pudong_buildings.geometry.duplicated()].explore()

pudong_buildings = pudong_buildings.drop_duplicates("geometry")

pudong_buildings.geom_type.value_counts()

pudong_buildings = pudong_buildings[pudong_buildings.geom_type != "Point"]
pudong_buildings.geom_type.value_counts()

pudong_buildings.index.get_level_values(0)

pudong_buildings.index.get_level_values(0).duplicated().sum()

pudong_buildings = pudong_buildings.set_index(pudong_buildings.index.get_level_values(0))

pudong_buildings.head()

pudong_buildings["building:levels"].isna().sum()

gdf_filled = pudong_buildings.copy()
gdf_filled = gdf_filled.to_crs(3857)

gdf_filled.shape, pudong_buildings.shape

missed_values = gdf_filled[gdf_filled['building:levels'].isna()]
filled_values = gdf_filled[gdf_filled['building:levels'].isna() == False]

fill_missed = missed_values.sjoin_nearest(filled_values, how="left", distance_col="distance", max_distance=1000, exclusive=True)

fill_missed.head()

fill_missed[["geometry", "building:levels_left", "building:levels_right", "distance"]]

fill_missed["building:levels_right"].isna().sum()

fill_missed["building:levels_right"].value_counts()

fill_missed["building:levels_right"].apply(type).value_counts()

fill_missed["building:levels_right"].isna().sum()

import re

def extract_number(value):
  if pd.isna(value):
    return np.nan
  if isinstance(value, (int, float)):
    return float(value)
  if isinstance(value, str):
    # Find first number (including decimals and negative numbers)
    match = re.search(r'-?\d+\.?\d*', value)
    return float(match.group()) if match else np.nan
  return np.nan

fill_missed["building:levels_right"] = fill_missed["building:levels_right"].apply(extract_number)

fill_missed["building:levels_right"].apply(type).value_counts()

fill_missed["building:levels_right"].isna().sum()

fill_missed["building:levels_right"].mean()

fill_missed["building:levels_right"] = fill_missed["building:levels_right"].fillna(3).astype(int)

fill_missed["building:levels_right"].isna().sum()

fill_missed["building:levels_right"].apply(type).value_counts()

fill_missed["building:levels_right"]

fill_missed.geometry.duplicated().sum()

#fill_clean = fill_missed.drop_duplicates("geometry")[["building:levels_right"]]

common_records = gdf_filled.index.isin(fill_missed.drop_duplicates("geometry").index)
gdf_filled.loc[common_records, "building:levels"] = fill_missed.drop_duplicates("geometry")["building:levels_right"].values

gdf_filled['building:levels'].isna().sum()

pudong_buildings.shape, gdf_filled.shape

pudong_buildings_final = pudong_buildings.loc[:, "geometry"].reset_index()

pudong_buildings_final["levels"] = gdf_filled['building:levels'].values

pudong_buildings_final = pudong_buildings_final.to_crs(3857)

pudong_buildings_final

pudong_buildings_final["area"] = pudong_buildings_final.area

pudong_buildings_final["levels"].apply(type).value_counts()

pudong_buildings_final["levels"].value_counts()

pudong_buildings_final["levels"] = pudong_buildings_final.levels.apply(extract_number)

pudong_buildings_final.levels.mean()



pudong_buildings_final["levels"] = pudong_buildings_final.levels.fillna(3).astype(int)

pudong_buildings_final["levels"] = pd.to_numeric(pudong_buildings_final['levels'], errors='coerce').astype('Float64').fillna(3).astype(int)

pudong_buildings_final["living_area"] = pudong_buildings_final.levels * pudong_buildings_final.area * 0.8

pudong_buildings_final.head()

pudong_buildings_final.head()

pudong_buildings_final["population"] = pudong_buildings_final["living_area"] / 31

pudong_buildings_final.head()

pudong_polygon = pudong.geometry

pudong_tourism = os.features.features_from_polygon(pudong_polygon.values[0], tags={
    "tourism": True,
    "historic": True
    }
                                                              )

pudong_tourism = pudong_tourism.drop_duplicates("geometry")

pudong_tourism.head()

pudong_tourism.shape

pudong_tourism.geom_type.value_counts()

pudong_tourism.explore()



pudong_key_tourism = os.features.features_from_polygon(pudong_polygon.values[0], tags={"tourism": True})

pudong_key_historic = os.features.features_from_polygon(pudong_polygon.values[0], tags={"historic": True})

pudong_key_tourism.shape, pudong_key_historic.shape

m = pudong_key_tourism.explore(color="red", tooltip="name")
pudong_key_historic.explore(m=m, color="blue", tooltip="name")
m

tourism_intersect = pudong_key_tourism.index.isin(gpd.sjoin(pudong_key_tourism, pudong_key_historic, how='inner').index)

tourism_no_historic = pudong_key_tourism[~tourism_intersect]

pudong_tourism = pd.concat([pudong_key_tourism.geometry, tourism_no_historic.geometry])

pudong_tourism.shape

pudong_tourism.explore()

pudong_tourism.geometry.duplicated().sum()

pudong_tourism = pudong_tourism.drop_duplicates()

pudong_tourism.shape



pudong_tourism = pudong_tourism.reset_index()

pudong_tourism = pudong_tourism[["geometry"]]

pudong_tourism

pudong_tourism["capacity"] = np.random.randint(300, 500, size=len(pudong_tourism))

pudong_tourism

pudong_tourism["buffer"] = pudong_tourism.to_crs(3857).buffer(1000)

pudong_tourism

map = pudong_tourism.explore(tiles="cartodbdarkmatter")
pudong_tourism.set_geometry('buffer').explore(
    m=map,
    color="cyan",
)
pudong_buildings_final.explore(
    m=map,
    color="blue",
)
map

merged = pudong_tourism.set_geometry("buffer").dissolve()

merged

merged["capacity"] = pudong_tourism.capacity.sum()

merged

merged.set_geometry("buffer").explore()

building_in_buffers = pudong_buildings_final.to_crs(3857).sjoin(merged.to_crs(3857), how="inner", predicate="intersects")

building_in_buffers

building_in_buffers.shape[0]

merged.capacity

building_in_buffers.population.sum()

merged.capacity / building_in_buffers.population.sum() * 100

provision = merged.capacity / building_in_buffers.population.sum() * 100

provision = merged.capacity / pudong_buildings_final.population.sum() * 100

print("Provision:", *provision)

buildings_in_buffers = gpd.sjoin(
    pudong_buildings_final,
    pudong_tourism.set_geometry("buffer"),
    how='inner',
    predicate='intersects',
    lsuffix='building',
    rsuffix='buffer'
)

buffer_groups = buildings_in_buffers.groupby(buildings_in_buffers.index_buffer)

for buffer_id, group in buffer_groups:
  print(buffer_id)
  print(group)

result = {
    buffer_id: {
        'building_indices': group.id.tolist(),
        'building_data': group.drop(columns=['index_buffer', 'id']).to_dict('records'),
        'service_capacity': group.capacity.tolist()[0],
        'overall_population': group.population.sum()
    }
    for buffer_id, group in buffer_groups
}

len(result.keys())

result

print("Provision:", *provision)



provision = merged.capacity / pudong_buildings_final.population.sum() * 100

print("Provision:", *provision)

buildings_in_buffers = gpd.sjoin(
    pudong_buildings_final,
    pudong_tourism.set_geometry("buffer"),
    how='inner',
    predicate='intersects',
    lsuffix='building',
    rsuffix='buffer'
)

buffer_groups = buildings_in_buffers.groupby(buildings_in_buffers.index_buffer)

for buffer_id, group in buffer_groups:
  print(buffer_id)
  print(group)

result = {
    buffer_id: {
        'building_indices': group.id.tolist(),
        'building_data': group.drop(columns=['index_buffer', 'id']).to_dict('records'),
        'service_capacity': group.capacity.tolist()[0],
        'overall_population': group.population.sum()
    }
    for buffer_id, group in buffer_groups
}



len(result.keys())

pudong_tourism.shape[0]

result

all_provisions = []
extra_capacity = 0
extra_population = 0

for id, value in result.items():
  if value["service_capacity"] >= value["overall_population"]:
    extra_capacity += value["service_capacity"] - value["overall_population"]
    all_provisions.append(1)
  else:
    extra_population += value["overall_population"] - value["service_capacity"]
    all_provisions.append(value["service_capacity"] / value["overall_population"])

print("Provision:", f'{round(np.mean(all_provisions) * 100, 3)}%')

print("Provision:", f'{round(np.mean(all_provisions + [extra_capacity / extra_population]) * 100, 3)}%')

all_provisions